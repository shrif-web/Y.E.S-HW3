// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type CreateUserPayload interface {
	IsCreateUserPayload()
}

type Exception interface {
	IsException()
}

type LoginPayload interface {
	IsLoginPayload()
}

type UpdateUserPayload interface {
	IsUpdateUserPayload()
}

type DuplicateUsernameException struct {
	Message *string `json:"message"`
}

func (DuplicateUsernameException) IsException()         {}
func (DuplicateUsernameException) IsCreateUserPayload() {}

type InternalServerException struct {
	Message *string `json:"message"`
}

func (InternalServerException) IsException()         {}
func (InternalServerException) IsCreateUserPayload() {}
func (InternalServerException) IsUpdateUserPayload() {}
func (InternalServerException) IsLoginPayload()      {}

type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type NoUserFoundException struct {
	Message *string `json:"message"`
}

func (NoUserFoundException) IsException()         {}
func (NoUserFoundException) IsUpdateUserPayload() {}

type Post struct {
	ID        string `json:"id"`
	Auther    *User  `json:"auther"`
	Timestamp int    `json:"timestamp"`
	Body      string `json:"body"`
	Title     string `json:"title"`
}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type TargetPost struct {
	Title string `json:"title"`
	Body  string `json:"body"`
}

type TargetUser struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type ToBeUser struct {
	Username *string `json:"username"`
	Password *string `json:"password"`
}

type User struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Posts []*Post `json:"posts"`
}

func (User) IsCreateUserPayload() {}
func (User) IsUpdateUserPayload() {}
func (User) IsLoginPayload()      {}

type UserPassMissMatchException struct {
	Message *string `json:"message"`
}

func (UserPassMissMatchException) IsException()    {}
func (UserPassMissMatchException) IsLoginPayload() {}
